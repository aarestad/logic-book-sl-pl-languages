WHITESPACE   = _{ " " }
open_paren   = _{ "(" }
closed_paren = _{ ")" }

numeric_subscript = { '\u{2081}' .. '\u{2089}' } // subscript 1 .. subscript 9

individual_constant = { 'a' .. 'v' ~ numeric_subscript? }
individual_variable = { 'w' .. 'z' ~ numeric_subscript? }
individual_term = { individual_constant | individual_variable }

tilde           = { "∼" } // note: not an ASCII tilde!
wedge           = { "∧" }
vel             = { "∨" }
horseshoe       = { "⊃" }
triple_bar      = { "≡" }
truth_functional_connective = { tilde | wedge | vel | horseshoe | triple_bar }

universal_quantifier_symbol   = { "∀" }
existential_quantifier_symbol = { "∃" }
quantifier_symbol = { universal_quantifier_symbol | existential_quantifier_symbol }
quantifier = { open_paren | quantifier_symbol | individual_variable | closed_paren }

prime = { "′" }
sentence_letter = { ASCII_ALPHA_UPPER ~ numeric_subscript? }

// Aab
predicate_with_terms = { sentence_letter ~ individual_term+ }
// A′′ab - note that if predicate_with_terms has n primes, it must be followed by n terms
// TODO DROP drops the whole stack in one go and is ok with "dropping" an empty stack
// predicate_with_primes_and_terms = { sentence_letter ~ PUSH(prime+) ~ (individual_term ~ DROP)+ }
predicate_with_primes_and_terms = { sentence_letter ~ prime+ ~ individual_term+ }

predicate = { predicate_with_primes_and_terms | predicate_with_terms }

atomic_formula = { predicate | sentence_letter }

negation               = { tilde      ~ formula                                       }
conjunction            = { open_paren ~ formula ~ wedge      ~ formula ~ closed_paren }
disjunction            = { open_paren ~ formula ~ vel        ~ formula ~ closed_paren }
material_conditional   = { open_paren ~ formula ~ horseshoe  ~ formula ~ closed_paren }
material_biconditional = { open_paren ~ formula ~ triple_bar ~ formula ~ closed_paren }

// TODO: rule 4: for *x* = (w|x|y|z), if P is a formula of PL that contains at least one occurrence of *x*
// and no *x*-quantifier, then (∀*x*)P and (∃*x*)P are both formulas of PL.
quantification         = { quantifier ~ formula }

formula = {
    atomic_formula // rule 1
  | negation // rule 2
  | conjunction | disjunction | material_conditional | material_biconditional // rule 3
  | quantification // rule 4
 }

// TODO: Sentence of PL: A formula P of PL is a sentence of PL if and only if no occurrence of a variable in P is free.
// can this be expressed in the grammar?
sentence = { formula }

top = { SOI ~ sentence ~ EOI }
